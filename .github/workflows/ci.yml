name: Service Validation

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  infrastructure-validation:
    runs-on: ubuntu-latest
    env:
      DB_WEDDING_SITE_USERNAME: ${{ secrets.DB_WEDDING_SITE_USERNAME }}
      DB_WEDDING_SITE_PASSWORD: ${{ secrets.DB_WEDDING_SITE_PASSWORD }}
      DB_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}
      MONITORING_PASSWORD: ${{ secrets.MONITORING_PASSWORD }}
      MAIL_HOST: ${{ secrets.MAIL_HOST }}
      MAIL_PORT: ${{ secrets.MAIL_PORT }}
      MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
      MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Create .env file
        run: |
          echo "DB_WEDDING_SITE_USERNAME=${{ env.DB_WEDDING_SITE_USERNAME }}" >> .env
          echo "DB_WEDDING_SITE_PASSWORD=${{ env.DB_WEDDING_SITE_PASSWORD }}" >> .env
          echo "DB_ROOT_PASSWORD=${{ env.DB_ROOT_PASSWORD }}" >> .env
          echo "MONITORING_PASSWORD=${{ env.MONITORING_PASSWORD }}" >> .env
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env

      - name: Install Docker Compose V2
        run: |
          mkdir -p ~/.docker/cli-plugins/
          curl -SL https://github.com/docker/compose/releases/download/v2.31.0/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose

      - name: Validate Docker Compose configuration
        run: docker compose config

      - name: Start infrastructure containers
        run: |
          docker compose up -d mariadb

      - name: Install test dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install pika

      - name: Debug Infrastructure Logs
        if: always()
        run: |
          docker compose ps
          docker compose logs mariadb

  backend-validation:
    needs: infrastructure-validation
    runs-on: ubuntu-latest
    env:
      DB_WEDDING_SITE_USERNAME: ${{ secrets.DB_WEDDING_SITE_USERNAME }}
      DB_WEDDING_SITE_PASSWORD: ${{ secrets.DB_WEDDING_SITE_PASSWORD }}
      MONITORING_PASSWORD: ${{ secrets.MONITORING_PASSWORD }}
      DB_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}
      MAIL_HOST: ${{ secrets.MAIL_HOST }}
      MAIL_PORT: ${{ secrets.MAIL_PORT }}
      MAIL_USERNAME: ${{ secrets.MAIL_USERNAME }}
      MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Run backend tests
        run: |
          cd backend
          ./gradlew test

      - name: Upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: backend/build/reports/tests/

      - name: Build backend
        if: success()
        run: |
          cd backend
          ./gradlew build

      - name: Start backend service and its dependencies
        run: docker compose up -d backend mariadb

      - name: Debug container state
        run: |
          echo "Current containers:"
          docker compose ps

          echo "\nContainer ports:"
          docker compose ps -a

          echo "\nNetwork information:"
          docker network ls

          echo "\nDetailed network inspection:"
          docker network inspect wedding_network

          echo "\nInitial backend logs:"
          docker compose logs backend

#      - name: Test backend health
#        run: |
#          echo "Checking backend container status..."
#
#          # Check if backend container exists using simpler command
#          if ! docker compose ps --status running backend | grep backend; then
#            echo "Error: Backend container not found or not running!"
#            echo "Current containers:"
#            docker compose ps
#            exit 1
#          fi
#
#          echo "Backend container is running, checking health..."
#          timeout=120
#          while [ $timeout -gt 0 ]; do
#            if curl -f "http://localhost:8080/adminInfo/health" 2>/dev/null; then
#              echo "Backend is healthy"
#              break
#            fi
#            echo "Still waiting for backend... $(($timeout))s remaining"
#
#            # Print recent container logs
#            echo "Recent container logs:"
#            docker compose logs --tail=200 backend
#
#            # Check container status
#            echo "Container status:"
#            docker compose ps backend
#
#            sleep 5
#            ((timeout-=5))
#          done
#
#          if [ $timeout -eq 0 ]; then
#            echo "Backend health check failed after timeout"
#            echo "Full container logs:"
#            docker compose logs backend
#            echo "Final container status:"
#            docker compose ps
#            exit 1
#          fi

  frontend-validation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        working-directory: ./frontend
        run: npm install

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Run tests
        working-directory: ./frontend
        run: npm test -- --watch=false --browsers=ChromeHeadless

      - name: Lint code
        working-directory: ./frontend
        run: npm run lint

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

  cleanup:
    needs: [infrastructure-validation, backend-validation, frontend-validation]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Stop all containers
        run: docker compose down -v
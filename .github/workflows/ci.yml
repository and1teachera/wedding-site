name: Docker Compose Validation

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  docker-compose-validation:
    runs-on: ubuntu-latest

    env:
      DB_WEDDING_SITE_USERNAME: ${{ secrets.DB_WEDDING_SITE_USERNAME }}
      DB_WEDDING_SITE_PASSWORD: ${{ secrets.DB_WEDDING_SITE_PASSWORD }}
      DB_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}
      MONITORING_PASSWORD: ${{ secrets.MONITORING_PASSWORD }}
      RABBITMQ_USER: ${{ secrets.RABBITMQ_USER }}
      RABBITMQ_PASSWORD: ${{ secrets.RABBITMQ_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Docker Compose V2
        run: |
          mkdir -p ~/.docker/cli-plugins/
          curl -SL https://github.com/docker/compose/releases/download/v2.31.0/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose

      - name: Validate Docker Compose configuration
        run: docker compose config

      - name: Start containers
        run: |
          docker compose up -d
          echo "Waiting for RabbitMQ to initialize..."
          timeout=120
          while [ $timeout -gt 0 ]; do
            if curl -sf http://localhost:15672/api/healthchecks/node; then
              echo "RabbitMQ is ready"
              break
            fi
            sleep 1
            ((timeout--))
          done
          if [ $timeout -eq 0 ]; then
            echo "RabbitMQ failed to start within the timeout period"
            docker compose logs rabbitmq
            exit 1
          fi

      - name: Test RabbitMQ
        run: |
          python3 test_rabbitmq.py
        env:
          RABBITMQ_USER: ${{ secrets.RABBITMQ_USER }}
          RABBITMQ_PASSWORD: ${{ secrets.RABBITMQ_PASSWORD }}

      - name: Debug RabbitMQ Logs
        run: |
          docker compose ps
          docker compose logs rabbitmq

      - name: Stop containers
        if: always()
        run: docker compose down -v

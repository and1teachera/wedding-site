name: Service Validation

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  infrastructure-validation:
    runs-on: ubuntu-latest
    env:
      DB_WEDDING_SITE_USERNAME: ${{ secrets.DB_WEDDING_SITE_USERNAME }}
      DB_WEDDING_SITE_PASSWORD: ${{ secrets.DB_WEDDING_SITE_PASSWORD }}
      DB_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}
      MONITORING_PASSWORD: ${{ secrets.MONITORING_PASSWORD }}
      RABBITMQ_USER: ${{ secrets.RABBITMQ_USER }}
      RABBITMQ_PASSWORD: ${{ secrets.RABBITMQ_PASSWORD }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Docker Compose V2
        run: |
          mkdir -p ~/.docker/cli-plugins/
          curl -SL https://github.com/docker/compose/releases/download/v2.31.0/docker-compose-linux-x86_64 -o ~/.docker/cli-plugins/docker-compose
          chmod +x ~/.docker/cli-plugins/docker-compose

      - name: Validate Docker Compose configuration
        run: docker compose config

      - name: Start infrastructure containers
        run: |
          docker compose up -d mariadb rabbitmq
          echo "Waiting for RabbitMQ to initialize..."
          timeout=300
          while [ $timeout -gt 0 ]; do
            if curl -sf -u $RABBITMQ_USER:$RABBITMQ_PASSWORD http://localhost:15672/api/health/checks/virtual-hosts; then
              echo "RabbitMQ is ready"
              break
            fi
            sleep 5
            ((timeout-=5))
            echo "Still waiting for RabbitMQ... $(($timeout))s remaining"
          done
          if [ $timeout -eq 0 ]; then
            echo "RabbitMQ failed to start within the timeout period"
            docker compose logs rabbitmq
            exit 1
          fi

      - name: Install test dependencies
        run: |
          python3 -m pip install --upgrade pip
          python3 -m pip install pika

      - name: Test RabbitMQ
        run: |
          python3 tests/test_rabbitmq.py
        env:
          RABBITMQ_USER: ${{ secrets.RABBITMQ_USER }}
          RABBITMQ_PASSWORD: ${{ secrets.RABBITMQ_PASSWORD }}

      - name: Debug Infrastructure Logs
        if: always()
        run: |
          docker compose ps
          docker compose logs rabbitmq mariadb

  backend-validation:
    needs: infrastructure-validation
    runs-on: ubuntu-latest
    env:
      DB_WEDDING_SITE_USERNAME: ${{ secrets.DB_WEDDING_SITE_USERNAME }}
      DB_WEDDING_SITE_PASSWORD: ${{ secrets.DB_WEDDING_SITE_PASSWORD }}
      MONITORING_PASSWORD: ${{ secrets.MONITORING_PASSWORD }}
      DB_ROOT_PASSWORD: ${{ secrets.DB_ROOT_PASSWORD }}

    steps:
      - uses: actions/checkout@v4

      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Build backend
        run: |
          cd backend
          ./gradlew build

      - name: Start backend service and its dependencies
        run: docker compose up -d backend mariadb rabbitmq

      - name: Test backend health
        run: |
          timeout=60
          while [ $timeout -gt 0 ]; do
            response=$(curl -s -o response.txt -w "%{http_code}" http://localhost:8080/actuator/health)
            if [ "$response" -eq 200 ]; then
              echo "Backend is healthy"
              cat response.txt
              break
            fi
            sleep 5
            ((timeout-=5))
            echo "Still waiting for backend... $(($timeout))s remaining"
            cat response.txt
          done
          if [ $timeout -eq 0 ]; then
            echo "Backend failed to become healthy"
            docker compose logs backend
            exit 1
          fi

      - name: Debug Backend Logs
        if: always()
        run: |
          docker compose ps
          docker compose logs backend


  frontend-validation:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        working-directory: ./frontend
        run: npm install

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Run tests
        working-directory: ./frontend
        run: npm test -- --watch=false --browsers=ChromeHeadless

      - name: Lint code
        working-directory: ./frontend
        run: npm run lint

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

  cleanup:
    needs: [infrastructure-validation, backend-validation, frontend-validation]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Stop all containers
        run: docker compose down -v
services:
  mariadb:
    image: mariadb:10.6
    container_name: wedding_mariadb
    restart: unless-stopped
    environment:
      MARIADB_USER: "${DB_WEDDING_SITE_USERNAME}"
      MARIADB_PASSWORD: "${DB_WEDDING_SITE_PASSWORD}"
      MARIADB_DATABASE: "wedding_site"
      MARIADB_ROOT_PASSWORD: "${DB_ROOT_PASSWORD}"
      MONITORING_PASSWORD: "${MONITORING_PASSWORD}"
      TZ: "UTC"
    volumes:
      - mariadb_data:/var/lib/mysql
      - ./init-scripts:/docker-entrypoint-initdb.d
    ports:
      - "3307:3306"
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "monitoring", "-p${MONITORING_PASSWORD}"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s
    networks:
      - wedding_network
    command:
      - --character-set-server=utf8mb4
      - --collation-server=utf8mb4_unicode_ci
      - --max-connections=50
      - --innodb-buffer-pool-size=128M
      - --expire-logs-days=0
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "mariadb"
  
  # MySQL Exporter for MariaDB metrics
  mysqld-exporter:
    image: prom/mysqld-exporter:v0.14.0
    restart: unless-stopped
    environment:
      - DATA_SOURCE_NAME=monitoring:${MONITORING_PASSWORD}@(mariadb:3306)/
    ports:
      - "9104:9104"
    depends_on:
      mariadb:
        condition: service_healthy
    networks:
      - wedding_network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9104/metrics"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
        
  loki:
    image: grafana/loki:2.8.0
    user: "0"  # Run as root to avoid permission issues
    ports:
      - "3100:3100"
    volumes:
      - loki_data:/loki
    # Use the default configuration with one override
    command: -config.file=/etc/loki/local-config.yaml -log.level=debug
    networks:
      - wedding_network
#    healthcheck:
#      test: ["CMD-SHELL", "wget -q --spider http://localhost:3100/ready || exit 1"]
#      interval: 10s
#      timeout: 5s
#      retries: 3
#      start_period: 20s

  promtail:
    image: grafana/promtail:latest
    volumes:
      - ./promtail-config.yaml:/etc/promtail/config.yaml
      - ./logs:/var/log/wedding
    command: -config.file=/etc/promtail/config.yaml
    networks:
      - wedding_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 128M
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:9080/ready || exit 1"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 20s
#    depends_on:
#      loki:
#        condition: service_healthy
        
  grafana:
    image: grafana/grafana:10.0.3
    container_name: wedding_grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_ALERTING_ENABLED=true
      - GF_UNIFIED_ALERTING_ENABLED=true
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana-provisioning:/etc/grafana/provisioning
    depends_on:
      - loki
      - prometheus
    networks:
      - wedding_network
    deploy:
      resources:
        limits:
          memory: 512M
        reservations:
          memory: 256M
    healthcheck:
      test: ["CMD-SHELL", "wget -q --spider http://localhost:3000/api/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
      - "5005:5005"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:mariadb://mariadb:3306/wedding_site
      - SPRING_DATASOURCE_USERNAME=${DB_WEDDING_SITE_USERNAME}
      - SPRING_DATASOURCE_PASSWORD=${DB_WEDDING_SITE_PASSWORD}
      - MAIL_HOST=${MAIL_HOST}
      - MAIL_PORT=${MAIL_PORT}
      - MAIL_USERNAME=${MAIL_USERNAME}
      - MAIL_PASSWORD=${MAIL_PASSWORD}
      - JWT_SECRET=${JWT_SECRET:-default-secret-key}
      - DEFAULT_PASSWORD=mywedding
      - LOGGING_LEVEL_COM_ZLATENOV_WEDDING_BACKEND=DEBUG
      - LOKI_URL=http://loki:3100/loki/api/v1/push
      - LOG_PATH=/var/log/wedding
    volumes:
      - ./logs:/var/log/wedding
    depends_on:
      mariadb:
        condition: service_healthy
#      loki:
#        condition: service_healthy
    networks:
      - wedding_network
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://backend:8080/actuator/health" ]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 40s
    logging:
      driver: "json-file"
      options:
        max-size: "20m"
        max-file: "5"
        tag: "backend"


  # Nginx metrics exporter
  nginx-exporter:
    image: nginx/nginx-prometheus-exporter:0.11.0
    restart: unless-stopped
    command:
      - -nginx.scrape-uri=http://frontend/nginx_status
    ports:
      - "9113:9113"
    depends_on:
      - frontend
    networks:
      - wedding_network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9113/metrics"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
    volumes:
      - ./frontend/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - backend
      - promtail
    networks:
      - wedding_network
    restart: unless-stopped
    deploy:
      resources:
        limits:
          memory: 256M
        reservations:
          memory: 128M
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 20s
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"
        tag: "frontend"

# Node exporter for host metrics
  node-exporter:
    image: prom/node-exporter:v1.6.1
    container_name: wedding_node_exporter
    restart: unless-stopped
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    command:
      - '--path.procfs=/host/proc'
      - '--path.sysfs=/host/sys'
      - '--path.rootfs=/rootfs'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    ports:
      - "9100:9100"
    networks:
      - wedding_network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9100/metrics"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Prometheus for metrics collection and storage
  prometheus:
    image: prom/prometheus:v2.47.2
    container_name: wedding_prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    depends_on:
      - backend
      - nginx-exporter
      - mysqld-exporter
      - node-exporter
    networks:
      - wedding_network
    healthcheck:
      test: ["CMD", "wget", "-q", "--spider", "http://localhost:9090/-/healthy"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 30s

volumes:
  mariadb_data:
    name: wedding_mariadb_data
  loki_data:
    name: wedding_loki_data
  grafana_data:
    name: wedding_grafana_data
  prometheus_data:
    name: wedding_prometheus_data

networks:
  wedding_network:
    name: wedding_network
    driver: bridge

